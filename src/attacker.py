import config

class Attacker():
  def __init__(self, name, expertise, softwares, probability):
    self.name = name
    self.expertise = expertise
    self.softwares = softwares
    self.attacks = []
    self.cve_list = []
    self.prob = probability

def getAttackers():
  attackers = []
  f = open('{0}/attackers.cfg'.format(config.CONFIG_FILE_PATH), 'r')
  num = int(f.readline().strip())
  for i in xrange(num):
    name = f.readline().strip()
    if name == '':
      break
    tech = f.readline().strip().split(',')
    skill = [float(x) for x in f.readline().strip().split(',')]
    prob = float(f.readline().strip())
    attackers.append(Attacker(name, skill, tech, prob))
  return attackers

def cveSoftwareInConfig(softwaresAffectedByCVE, attackerSoftwares):
  '''
  If atleast one of the technologies in a configuration is among the affected software
  '''
  #print config
  #print 'in'
  #print softwares
  #print '---'
  for i in xrange(len(attackerSoftwares)):
    for s in softwaresAffectedByCVE:
      if attackerSoftwares[i] in s:
        return i
  return -1

def populateAttackerRewards(attackers, cve_list):
  for attacker in attackers:
    for cve in cve_list:
      tech_index = cveSoftwareInConfig(cve.systems, attacker.softwares)
      if tech_index > -1 and attacker.expertise[tech_index] > cve.exploit_score:
        attacker.attacks.append(cve.rewards)
        attacker.cve_list.append(cve.name)

def printInGameFormat(attackers):
  for attacker in attackers:
    print attacker.prob
    # One extra attack action is the NO-OP
    print str(len(attacker.attacks)+1)
    for i in range(4):
      if i == 0:
        temps = ""
        for cve in attacker.cve_list:
          temps += cve + '|'
        print temps+'NO-OP'
      temps = ""
      for attack in attacker.attacks:
        temps += str(attack[i])
      print temps+'(0,0)'

def getAllAttacksUsed(attackers):
  unique_attack_list = []
  for attacker in attackers:
    for i in range(len(attacker.cve_list)):
      if not attacker.cve_list[i] in unique_attack_list:
          unique_attack_list.append(attacker.cve_list[i])
  return unique_attack_list
