import xml.etree.ElementTree as ET
import config

NSMAP={'mw':'http://nvd.nist.gov/feeds/cve/1.2'}
DATA_FILE_PATH = "./nvd_data"

class CVE():
   def __init__(self, name, year, softwares, impact_score, base_score, exploit_score):
      self.name = name
      self.year = year
      self.systems = softwares
      self.impact_score = impact_score
      self.base_score = base_score
      self.exploit_score = exploit_score
      self.rewards = []
   def __str__(self):
      if not self.systems == None:
        return self.name + "," + self.year + "," + str(self.systems) + "," + str(self.impact_score) + "," + str(self.base_score) + "," + str(self.exploit_score)
      return self.name + "," + self.year + "," + str(self.impact_score) + "," + str(self.base_score) + "," + str(self.exploit_score)

def isVulnRelevent( softwaresAffected, releventTech ):
  '''
  Checks if the sofware affected is present in the
  technologies used by our service.
  '''
  if softwaresAffected in releventTech:
      return True
  return False

def getAffectedSoftwares( vuln_soft, softwares, releventTech ):
  '''
  Given a xml Element object, forms a list of all softwares (name+version+edition)
  that it affects
  '''
  if not vuln_soft is None:
    for product in vuln_soft.findall('mw:prod', namespaces=NSMAP):
      for version in product.findall('mw:vers', namespaces=NSMAP):
        #if isVulnRelevent( product.get('name').strip().lower(), releventTech ):
        for rv in releventTech:
          if rv[0] in product.get('name').strip().lower():
          # Consider both software and version
          #if rv[0] in product.get('name').strip().lower() and rv[1] == version.get('num'):
            name = product.get('name') + version.get('num')
            softwares.append(name)

def getCVEList(start, end, releventTech):
  '''
  Obtain a CVE list of all 'relevent' CVE-objects (see above) from the file
  ------------------------------------------------------------------------
  If a vulnerability entry affects atleast one of the technologies
  in our configuration, we consider it as relevent.
  '''
  cve_list = []
  for i in range(start, end):
    data = ET.parse('{0}/nvdcve-{1}.xml'.format(config.DATA_FILE_PATH ,str(i)))
    for entry in data.findall('.//mw:entry', namespaces=NSMAP):
      flag=False
      if entry.get('reject') is None:
        softwares = []
        getAffectedSoftwares( entry.find('mw:vuln_soft', namespaces=NSMAP), softwares, releventTech )
        if softwares:
            #print softwares
            if (not entry.get('CVSS_impact_subscore') == None) and (not entry.get('CVSS_base_score') == None) and (not entry.get('CVSS_exploit_subscore') == None):
                x = CVE(entry.get('name'), entry.get('published'), softwares, float(entry.get('CVSS_impact_subscore')), float(entry.get('CVSS_base_score')), float(entry.get('CVSS_exploit_subscore')))
            cve_list.append(x)
  return cve_list
