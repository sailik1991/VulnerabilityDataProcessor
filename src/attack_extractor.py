import sys, getopt, cve, attacker, config#, predictor

def cveSoftwareInConfig(softwares, config):
  '''
  If atleast one of the technologies in a configuration is among the affected software
  '''
  for c in config:
    for s in softwares:
      if c in s:
        return True
  return False

def techAffectedByCVE(softwares, tech):
  for s in softwares:
    if tech in s:
      return True
  return False

def getScoreForConfig(cve, config):
  '''
  Adds rewards for defender and attacker respectively based on configurations and vulnerabilities
  '''
  if cveSoftwareInConfig(cve.systems, config):
    cve.rewards.append( (-1*float(cve.impact_score), float(cve.base_score)) )
  else:
    cve.rewards.append((0,0))

def showHelp():
  print 'attackGetter.py -s <start year> -e <end year> -p'

if ( __name__ == "__main__"):

  shouldPredict = False
  # Parse optargs
  try:
    opts, args = getopt.getopt(sys.argv[1:], "hps:e:", ["start=", "end="])
  except getopt.GetoptError:
    showHelp()
  start = end = mode = 0
  for opt, arg in opts:
    if opt == '-h':
      showHelp()
      sys.exit()
    elif opt == '-p':
      shouldPredict = True
    elif opt in ('-s', '--start'):
      start = int(arg)
    elif opt in ('-e', '--end'):
      end = int(arg)

  # Initialize data
  rt_data = open('{0}/releventTech.cfg'.format(config.CONFIG_FILE_PATH), 'r').read().split()
  releventTech = []
  for i in rt_data:
    releventTech.append(i.split(','))

  configurations = []
  f = open('{0}/system_configs.cfg'.format(config.CONFIG_FILE_PATH), 'r')
  while True:
    config = f.readline().strip()
    if config == '':
      break
    else:
      configurations.append(config.split(","))
  f.close()

  attackers = attacker.getAttackers()

  cve_list = []
  if start < 2002 or end > 2017:
    showHelp()
    sys.exit()

  print 'Parsing NVD data and making CVE list . . .'
  cve_list = cve.getCVEList(start, end, releventTech)
  print 'DONE !'

  # For each attack, obtain defender and attacker rewards tables
  #----------------------------------------------------------------
  # Each attack has n 2-tuples defined as rewards.
  # Each tuple represents (R_d, R_a) each of the 'n' configurations.
  print 'Generating R_a and R_d for CVEs in CVE list . . .'
  for cve in cve_list:
    for config in configurations:
      getScoreForConfig(cve, config)
  print 'DONE !'

  # Associate reward sets for each attacker
  attacker.populateAttackerRewards(attackers, cve_list)
  print len(configurations)
  print len(attackers)
  attacker.printInGameFormat(attackers)
  atck_lst = attacker.getAllAttacksUsed(attackers)
  for a in atck_lst:
      print a
  #attacker.printAttacks(attackers)
  if shouldPredict:
    print 'Predicting # of CVEs in the upcoming year . . .'
#    predictor.predict(cve_list, releventTech, start, end)
